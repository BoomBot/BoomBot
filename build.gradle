repositories {
    mavenCentral()
    jcenter()
}

apply plugin: 'java'

ext.configFile = file "build.properties"

configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

group = config.group
archivesBaseName = config.archiveName
version = config.releaseVersion

dependencies {
    compile "net.dv8tion:JDA:${config.jdaVersion}"
    compile "com.google.code.gson:gson:${config.gsonVersion}"
    compile "com.google.guava:guava:${config.guavaVersion}"
    compile "commons-io:commons-io:${config.commonsIOVersion}"
    compile "org.apache.logging.log4j:log4j-api:${config.log4jVersion}"
    compile "org.apache.logging.log4j:log4j-core:${config.log4jVersion}"
}

jar {
    manifest  {
        attributes 'Main-Class' : config.mainClass
    }
}

task sourceJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': config.mainClass
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

//task copyLang(type: Copy) {
//    from 'lang'
//    into 'build/libs/lang'
//}

//task copyNative(type: Copy) {
//    from 'ffmpeg_native'
//    into 'build/libs/ffmpeg_native'
//}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = "dev"
}

tasks.withType(Zip) { task ->
    task.doLast {
        ant.checksum algorithm: 'MD5', file: it.archivePath
        ant.checksum algorithm: 'SHA1', file: it.archivePath
    }
}

build.dependsOn fatJar, /*copyLang, copyNative, */sourceJar, deobfJar